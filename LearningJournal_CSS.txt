CSS Learning Journal

"Modern CSS-Master the Key Concepts of CSS for Modern Web Development"

1. Introduction to CSS

CSS(Cascading Style Sheets) - It's a language for specifying how an HTML document is displayed
Selector {property: value;} - .header {background-color: red;}

Property conflict - If the same property is used more than once in a given rule, the last definition in the rule wins.

Comments - /*comment*/

At-rules - special CSS rule that acts as a directive controlling the behavior of CSS.
    @charset: Defines the character encoding used in the CSS file.

    @import: Imports, or includes, the contents of another style sheet.

    @media: Defines a media query.

    @keyframes: Defines a set of keyframes for a CSS animation.

How to use:

    Inline - by using the style attribute inside HTML elements

    Internal - by using a <style> element in the <head> section 
            <head>
                <style>
                    body {background-color: powderblue;}
                    h1   {color: blue;}
                    p    {color: red;}
                </style>
            </head>

    External - by using a <link> element to link to an external CSS file
            <head>
                <link rel="stylesheet" href="styles.css">
            </head>

2.CSS Selectors

A selector determines which element(s) a CSS rule applies to.
CSS selectors can target multiple elements on the page and a single HTML element can be affected by multiple CSS rules.

The basic types of selectors are:

    Universal - matches all elements
        * {
            margin: 0;
        }

    Element - targets an HTML element by its tag name
        p {
            margin: 25px;
        }

    ID - An HTML element can have an id attribute. As a general rule, there should only be one element with a given id.
        #header {
            padding: 25px;
        }

    Class - An HTML element can also have a class attribute. A class can be used to mark all elements of a related type.
        .nav-link {
            color: darkcyan;
        }
    
    Attribute - HTML elements can also be selected by their attribute values or by the presence of an attribute.

        [name] - Selects all elements that have the given attribute, regardless of its value.

        [name="value"] - Selects all elements that have the given attribute, whose value is the string value.

        [name~="value"] - Selects all elements that have the given attribute, whose value contains the string value separated by whitespace.

        [name*="value"] - Selects all elements that have the given attribute, whose value contains the substring value.

        [name^="value"] - Selects all elements that have the given attribute, whose value begins with value.

        [name$="value"] - Selects all elements that have the given attribute, whose value ends with value.


    div.my-class - Matches all div elements with a class of my-class.

    span.class-one.class-two - Matches all span elements with a class of both class-one and class-two.

    a.nav-link[href*="example.com"] - Matches all a elements with a class of nav-link that have an href attribute that contains the string example.com.

    A CSS rule can have multiple selectors separated by a comma. The rule will be applied to any element that is matched by any one of the given selectors.
        .class-one, .class-two
    
    Selector combinators - Combinators are used to select more specific elements.

        Descendant combinator - The descendant combinator matches an element that is a descendant of the element on the left-hand side.
            .header div

        Child combinator - The child combinator matches an element that is a direct child of the element on the left-hand side.
            .header > div

        General sibling combinator - The general sibling combinator matches an element that is a sibling, but not necessarily an immediate sibling, of the element on the left-hand side.
            .header ~ div

        Adjacent sibling combinator - The adjacent sibling combinator is similar to the general sibling combinator, except it only matches elements that are an immediate sibling.
            .header + div

        Using multiple combinators - Just like basic selectors, combinators can be combined to form even more specific selectors.
            div.header > div + button

    Pseudo-classes - A pseudo-class allows you to select elements based on some special state of the element.

        :active - Matches an element that is currently being activated. For buttons and links, this usually means the mouse button has been pressed but not yet released.

        :checked - Matches a radio button, checkbox, or option inside a select element that is checked or selected.

        :focus - Matches an element that currently has the focus. This is typically used for buttons, links, and text fields.

        :hover - Matches an element that the mouse cursor is currently hovering over. This is typically used for buttons and links but can be applied to any type of element.

        :valid, :invalid - Used with form elements using HTML5 validation. The :valid pseudo-class matches an element which is currently valid according to the validation rules, and :invalid matches an element which is not currently valid.

        :visited - Matches a link whose URL has already been visited by the user. To protect a user's privacy, the browser limits what styling can be done on an element matched by this pseudo-class.

        :first-child, :last-child - Matches an element that is the first or last child of its parent.

        :nth-child(n) - his pseudo-class takes an argument. It matches an element that is the nth child of its parent. The index of the first child is 1.

        :nth-of-type(n) - Similar to :nth-child, except that it only considers children of the same type.

        :root - Matches the root element of the document. This is usually the html element.

        :not() - :not accepts a selector as its argument and will match any element for which the selector does not match.

    Pseudo-elements - A pseudo-element lets you select only part of a matched element. Pseudo-elements are specified with a double colon (::) followed by the pseudo-element name.

        ::first-line - Matches the first line of a block element.

        ::first-letter - Applies the styles only to the first letter of the first line of an element.

        ::before, ::after - Two special pseudo-elements are ::before and ::after. These pseudo-elements don't select part of the element; rather, they actually create a new element as either the first child or the last child of the matched element, respectively. These pseudo-elements are typically used to decorate or add effects to an element.

    Specificity rankings:
        Inline styles in an element's style attribute

        ID selectors

        Class selectors, attribute selectors, and pseudo-classes

        Element selectors and pseudo-elements


        The escape hatch: !important - Any CSS property can have the keyword !important after it inside of a rule. This keyword will cause that property to always win in a conflict, even if the rule that contains it has lower specificity than another conflicting rule.

3. Basic CSS Concepts

    Every element in CSS is treated like a rectangular box. This is sometimes referred to as the box model. The box is made up of four parts. Starting from the outside and moving toward the center, these are the margin, border, padding, and content.

        margin - the space between an element's border and its surrounding elements.

        border - The border is an outline around the box. Borders can be styled with a thickness, style, and color.

        padding - The padding is the space between the element's border and the content itself.

        width, height - size of an element

        box-sizing:
            content-box - This is the default. With content-box, the width and height properties are treated as the width and height of the content area of the box only. The actual width and height taken up by the element's box is the sum of the specified width and height (the content box), the padding on each side, and the border width on each side.

            border-box - With border-box, the values of the width and height properties are treated as the size of the content box plus the padding and border width.

    Block (e.g., div) and inline elements (e.g., span) - two types of HTML elements. n element's type can be changed by setting the display property to block, inline, or inline-block.

    Block element - A block element always appears on its own line and takes up the full width of its containing element, unless an explicit width is set with the width property. The height of a block element, by default, is just enough to fit the height of its content, but this height can also explicitly be set with the height property.

    Inline element - Unlike block elements, an inline element is rendered inside the normal flow of text. They only take up enough width and height as necessary to contain their content. Setting the width or height properties of an inline element will have no effect. Padding and margins on inline elements give extra room horizontally, but not vertically.

    Inline-block element - An inline-block element flows with the text like an inline element, but the width and height properties are respected, as are the vertical padding and margin.

    Units:

        px - It is generally not recommended to use px units in CSS. The main reason is that these pixel-based dimensions don't always scale well when a user adjusts the browser zoom level. This can be an accessibility issue. There is one property that is appropriate to use pixels for â€“ the page's base font size. In most browsers, this defaults to 16px. The base font size is set by applying the font-size property to the root html element. It's also appropriate to use pixels in media queries

        em - The em unit is a relative unit. It is relative to the font size of the element. The header element has a font size of 24px. The padding is specified as 0.5em, or half of the element's font size. Therefore, the padding applied to this element will be 12px.

        rem - The rem unit is also a relative unit. It stands for "root em" and is relative to the page's base font size. For example, if the base font size is 16px (remember that this usually doesn't correspond to physical pixels), a size of 1rem is equal to 16px. 1.5rem would be 16px * 1.5 = 24px. rem units are a good choice, especially for layout properties, since the size of 1rem remains constant throughout the document (unlike the em unit). If the browser is zoomed, everything resizes nicely because it's all proportional to the base font size.

        Viewport units: vw and vh - The viewport is the area of the page that is currently visible in your web browser. CSS also has units that are relative to the viewport size: vw (viewport width) and vh (viewport height). Each of these units are 1% of the viewport size in that direction, that is, 1vw is 1% of the viewport width and 1vh is 1% of the viewport height. If the viewport is resized, then any elements using vw units will have their sizes adjusted accordingly. Because vw and vh are relative to the viewport size, they are a good choice when using responsive design techniques. There are also two related units, vmin and vmax. vmin is defined as whichever is smaller â€“ the viewport width or the viewport height â€“ and vmax is the larger of the two.

        % - The % unit is relative to the size of another value. What exactly this is relative to depends on the CSS property. For example, for the font-size property, the % unit is defined as a percentage of the parent element's font size. However, for the padding property, % is defined as a percentage of the element's width.

        Some property values take no units at all but rather just a number. For example, the opacity property expects a number between 0 and 1. Another example of this is some flexbox properties such as flex-grow and flex-shrink, which expect integer numbers without units.

    Functions:

        calc - The calc function lets you combine the different units we saw earlier to calculate an exact amount. It can be used anywhere a value is expected. The real power of the calc function is that you can have mixed units in the calculation. For example, suppose you want the height of an element to be 10 pixels short of 1.5rem. This can easily be accomplished with the calc function: calc(1.5rem - 10px). This is likely easier than doing the size calculations yourself to specify an exact pixel value.

    Color:
        RGB (rgb(255, 99, 71))
        HEX (#ff6347)
        HSL (hsl(9, 100%, 64%))
        rgbA & hslA - A - alpha channel/transparency

    Overflow (also overflow-x and overflow-y) - behavior when the content is too big for the container.

        hidden - the overflowing content is simply not displayed. It is clipped by the bounds of the containing element.

        scroll - When the overflow property is set to scroll, the overflowing content is initially not visible. However, there are scrollbars provided so that the user can scroll and view the overflowing content. The scrollbars are always provided, even if the content does not overflow.

        auto - This behaves similarly to scroll. The difference is that when overflow is set to auto, the scrollbars are only provided if the content actually overflows.

    CSS variables - Why would we want to use variables in CSS? Suppose you're designing a website for a company. You use their brand color, #3FA2D9, in many places throughout your CSS. Later, the site is going through a rebranding, and the brand color is changing. You now have to change the brand color in every place you used #3FA2D9. Instead, you can define a brand-color variable and reference that variable everywhere you need to use the brand color. Later, when that color changes, you simply need to change the color value once â€“ in the variable declaration.

        --brand-color: #3FA2D9
        background-color: var(--brand-color);
        background-color: var(--brand-color, #3FA2D9); - backup option

    A variable can be declared on any element or pseudo-element. Variables then cascade down to descendant elements. To make a variable apply to the entire document (a so-called global variable), you can set it using the special :root selector

        --primary-border-color: red;
        --primary-border-style: solid;
        --primary-border-width: 3px;
        --primary-border:
            var(--primary-border-width)
            var(--primary-border-style)
            var(--primary-border-color);

        height: calc(var(--row-height) * var(--visible-rows));

4. Basic Styling

    Global keywords:

        initial - Uses the initial value set by the browser's built-in style sheet.

        inherit - Takes the value used by the element's parent.

        unset - If the property naturally inherits from its parent, such as font-size, it is set to the inherited value. Otherwise, it is set to the initial value from the browser's style sheet.

    Shorthand and multiple values:

        padding (padding-top, padding-bottom, padding-left, and padding-right properties)


        border-width: 1px; - all four borders have the same width.

        border-width: 1px 5px; - If two values are specified, the first applies to the top and bottom, and the second applies to the left and right.

        border-width: 1px 5px 10px; - If three values are specified, the first applies to the top, the second applies to the left and right, and the third applies to the bottom.

        border-width: 1px 5px 10px 20px; - if four values are specified, they are applied in clockwise order, starting at the top.

    Borders:

        border-color - The border-color property, as its name implies, sets the color of the border.

        border-width - The border-width property determines how thick the border is. The value of border-width can be a value like 3px. There are also some predefined values: thin, medium, and thick.

        border-style - The border-style property determines the visual appearance of the border.
            solid
            dotted
            dashed
            double
            groove
            ridge
            inset
            outset

        border: 5px solid red;

        border-collapse - Only applies to table elements. It controls how borders are preserved or collapsed between adjoining table cells. The default value is separate. With this default behavior, a table's borders are not combined. border-collapse: collapse;

        border-radius - By default, blocks have 90-degree rectangular corners. That isn't always the most aesthetically pleasing design, though. To address this, CSS gives us the border-radius property. This property gives us rounded corners. The corners can be circular or elliptical.

        border-radius: 10px;

        border-radius: 20px / 10px; - ellipse

        border-bottom-right-radius: 10px 20px;
        border-bottom-left-radius: 5px;
        border-top-left-radius: 20px 10px;
        border-top-right-radius: 50%;

    Box shadows:
        A box shadow has a color, and its dimensions can be specified with up to four values, which are:
            X offset
            Y offset
            Blur radius: How far out the shadow is blurred
            Spread radius: How far the shadow extends beyond the element's dimensions
        At a minimum, the X and Y offsets must be given. By default, the blur and spread radius are zero.

        box-shadow: 5px 5px black; - no blur nor spread
        box-shadow: 5px 5px 10px black; - added blur radius
        box-shadow: 5px 5px 0 5px black; - all with 0 blur radius
        box-shadow: 5px 5px 10px 5px black;
        box-shadow: 0 0 5px 5px black; - all directions
        box-shadow: 0 0 25px black inset; - inward shadow
        box-shadow: 0 0 10px 0 black, 0 0 25px red inset; - multiple shadows

    Opacity:
        By default, most elements start out with a transparent background. When a background color or image is assigned, that element becomes opaque. You cannot see through the element to what's behind it. Borders and text are also opaque. You can change this behavior with the opacity property. opacity applies to the entire element â€“ background, border, text, images, and any other content within that element or its children. The opacity property takes a number between 0 and 1 or a percentage from 0% to 100%. This sets the level of transparency of the element. An opacity of 0.5, or 50%, is half transparent.

    Hiding elements:
        display: none - When the display property is set to none, the element is removed from the flow of the document as if it was never there. Other elements will move to fill in the space.

        visibility: hidden - This behaves a little differently than display: none â€“ the flow of the document is not affected. This means that no elements will move to fill the empty space left by the hidden element.

        opacity: 0 - This has the same net effect as visibility: hidden â€“ the element is effectively hidden, but the layout is unchanged.